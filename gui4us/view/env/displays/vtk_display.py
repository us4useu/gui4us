from typing import List, Union
import time

import numpy as np
import param
import vtk
from panel.reactive import ReactiveHTML
from abc import abstractmethod

import gui4us.cfg.display as display_cfg
from gui4us.common import ImageMetadata
from gui4us.logging import get_logger
from gui4us.utils import get_free_port_for_address
from gui4us.view.env.displays.vtk import (
    VTKDisplayServer, VTKDisplayServerOptions
)
from .utils import to_vtk_image_data, convert_from_named_to_vtk_cmap


class AbstractVTKDisplay(ReactiveHTML):
    __javascript__ = [
        "content/connectToDisplay.js"
    ]
    # NOTE: width and height of the below node determines the final
    # dimensions of the image generated by the VTK display server
    _template = '<div id="display_vtk" style="width: 50%; height: 50%; margin: 0 auto;"></div>'
    _scripts = {
        "render":
            "sessionURL = 'ws://' + data.host + ':' + data.port; "
            "state.client = connectToDisplay(display_vtk, {application: data.display_name, sessionURL: sessionURL})"
    }

    def __init__(self, **params):
        """
        :param metadatas: list of output metadata; metadata[i] corresponds to
            value[i] from the update method
        """
        super().__init__(**params)
        self.logger = get_logger(f"{type(self)}:{self.display_name}")
        if self.port == 0:
            self.port = get_free_port_for_address(self.host)
        self.server = VTKDisplayServer(
            render_view=self.render_window,  # should be created by child
            options=VTKDisplayServerOptions(
                host=self.host,
                port=self.port,
                debug=False
            )
        )

    def start(self):
        self.start_result = self.server.start()
        self.logger.info(f"Server started at: ws://{self.host}:{self.port}")

    def join(self):
        self.server.join()


